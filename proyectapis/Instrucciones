Aplicaci√≥n web de inventario/venta de productos con Webpay y MongoDB

Gu√≠a de instalaci√≥n, configuraci√≥n y uso

IMPORTANTE: Este proyecto utiliza MongoDB Atlas como base de datos principal.

1) Requisitos:

    - Python 3.11 o superior
    - pip (gestor de paquetes de Python)
    - Git (opcional, para clonar el repositorio)
    - Acceso a Internet para instalar dependencias
    - Cuenta de MongoDB Atlas (ya configurada en el proyecto)

2) Instalaci√≥n:

    a) Clona el repositorio o descarga el c√≥digo fuente y navega a la carpeta "proyectapis":
        git clone https://github.com/joamendoza/ProyectoAPIS.git
        cd ProyectoAPIS/proyectapis

    b) Crea y activa un entorno virtual:
        python -m venv venv
        # En Linux/Mac:
        source venv/bin/activate
        # En Windows:
        venv\Scripts\activate

    c) Instala las dependencias:
        pip install -r requirements.txt

3) Configuraci√≥n:

    NOTA: Este proyecto NO requiere migraciones tradicionales ya que usa MongoDB.
    
    a) (Opcional) Para funcionalidades de Django Admin, ejecuta:
        python manage.py migrate
        
    b) (Opcional) Crea un superusuario para el panel de administraci√≥n:
        python manage.py createsuperuser
        
    c) Para poblar la base de datos MongoDB con datos de ejemplo:
        python manage.py poblar_mongo

4) Ejecuci√≥n del servidor de desarrollo:

    python manage.py runserver

    Accede a la aplicaci√≥n en: http://127.0.0.1:8000/

5) Interacci√≥n con la aplicaci√≥n:

    ===== P√ÅGINAS PRINCIPALES =====

    a) P√°gina Principal y Productos:
        - P√°gina principal: http://127.0.0.1:8000/
        - Cat√°logo de productos: http://127.0.0.1:8000/venta/
        - Lista de productos para carrito: http://127.0.0.1:8000/carrito/productos/

    b) Gesti√≥n de Inventario:
        - Ver inventario por sucursales: http://127.0.0.1:8000/inventario/
        - Crear nuevo producto: http://127.0.0.1:8000/crear-producto/
        - Actualizar stock: http://127.0.0.1:8000/actualizar-stock/

    c) Carrito de Compras:
        - Ver carrito: http://127.0.0.1:8000/carrito/
        - Agregar productos al carrito desde: http://127.0.0.1:8000/venta/

    d) Proceso de Pago:
        - Desde el carrito, haz clic en "Procesar Compra"
        - Pago con Webpay: Se integra autom√°ticamente
        - P√°gina de √©xito: http://127.0.0.1:8000/compra-exitosa/
        - P√°gina de error: http://127.0.0.1:8000/compra-rechazada/

    e) Boletas y Documentos:
        - Tras un pago exitoso, se muestra la boleta en pantalla
        - Descarga PDF disponible desde la p√°gina de confirmaci√≥n

6) API REST con MongoDB:

    ===== ENDPOINTS PRINCIPALES =====

    a) Informaci√≥n de la API:
        - Base API: http://127.0.0.1:8000/api/
        - Documentaci√≥n completa en: API_ENDPOINTS.md

    b) Consultar Productos:
        - Todos los productos: http://127.0.0.1:8000/api/productos/
        - Productos para venta: http://127.0.0.1:8000/api/productos/venta/
        - Producto espec√≠fico: http://127.0.0.1:8000/api/productos/?productoid=TALADRO-001
        - Por sucursal: http://127.0.0.1:8000/api/productos/?sucursalid=1

    c) Consultar Sucursales:
        - Todas las sucursales: http://127.0.0.1:8000/api/sucursales/
        - Inventario por sucursal: http://127.0.0.1:8000/api/sucursales/1/inventario/

    d) Operaciones con Headers (PowerShell):
        # Crear producto:
        $headers = @{
            "Content-Type" = "application/json"
            "password" = "centro123"
            "adminpassword" = "admin123"
        }
        $body = @{
            "_id" = "PRODUCTO-001"
            "marca" = "TestMarca"
            "nombre" = "Producto de Prueba"
            "precio" = 10000
            "cantidad" = 50
        } | ConvertTo-Json
        Invoke-WebRequest -Uri "http://127.0.0.1:8000/api/productos/1/" -Method POST -Headers $headers -Body $body

    e) Consultar Boletas:
        - Todas las boletas: http://127.0.0.1:8000/api/boletas/
        - Boleta espec√≠fica: http://127.0.0.1:8000/api/boletas/BOL-1704672000-1234/
        - Estad√≠sticas: http://127.0.0.1:8000/api/boletas/estadisticas/
        - Filtros disponibles: ?fecha_desde=2024-01-01&fecha_hasta=2024-12-31&sucursal_id=1&estado=completada

    ===== CREDENCIALES DE SUCURSALES =====
    - Sucursal 1 (Centro): centro123
    - Sucursal 2 (Maip√∫): maipu123  
    - Sucursal 3 (Las Condes): condes123
    - Administrador: admin123

7) Base de Datos MongoDB:

    ===== INFORMACI√ìN DE CONEXI√ìN =====
    - URL: mongodb+srv://Admin:Admin@integracionpl.jwyptq0.mongodb.net/Ferremas
    - Base de Datos: Ferremas
    - Colecciones: productos, sucursales, administradores

    ===== PRODUCTOS DE EJEMPLO =====
    Los siguientes productos est√°n disponibles por defecto:
    - TALADRO-001: Taladro Percutor 13mm 600W (Bosch)
    - SIERRA-002: Sierra Circular 7-1/4" 1600W (DeWalt)
    - TORNILLO-003: Tornillo Autoperforante 6x60mm (Hilti)
    - PINTURA-004: Pintura L√°tex Blanco Semi-Mate (Sherwin Williams)
    - CABLE-005: Cable El√©ctrico NYA 12 AWG (Procobre)
    - CASCO-006: Casco de Seguridad Industrial (3M)
    - MARTILLO-007: Martillo de Carpintero 16 oz (Stanley)
    - BROCA-008: Set de Brocas para Metal HSS (Makita)

8) Caracter√≠sticas del Sistema:

    ===== FUNCIONALIDADES PRINCIPALES =====
    - ‚úÖ Cat√°logo de productos con b√∫squeda en tiempo real
    - ‚úÖ Gesti√≥n de inventario por sucursales
    - ‚úÖ Carrito de compras con persistencia
    - ‚úÖ Integraci√≥n con Webpay para pagos
    - ‚úÖ Generaci√≥n de boletas en PDF
    - ‚úÖ API REST completa con MongoDB
    - ‚úÖ Interfaz web responsiva y moderna
    - ‚úÖ Sistema de autenticaci√≥n por sucursales

    ===== NAVEGACI√ìN UNIFICADA =====
    Todas las p√°ginas incluyen:
    - Navbar con acceso a API endpoints
    - Dropdown con operaciones CRUD
    - Enlaces directos a inventario y carrito
    - Footer con informaci√≥n de contacto
    - Dise√±o responsive y moderno
    - Tipograf√≠a consistente (Inter/system fonts)
    - Colores corporativos unificados

    ===== TEMPLATES ACTIVOS (10 principales) =====
    1. productos_venta.html - P√°gina principal de productos
    2. inventario_sucursales.html - Gesti√≥n de inventario
    3. crear_producto_form.html - Formulario crear producto
    4. actualizar_stock_form.html - Formulario actualizar stock
    5. carrito_mongo.html - Vista del carrito
    6. compra_exitosa.html - Confirmaci√≥n de compra
    7. compra_rechazada.html - Compra rechazada
    8. lista_productos_mongo.html - Lista para agregar al carrito
    9. producto_list.html - Lista de productos (inventario)
    10. producto_form.html - Formulario de productos

9) Panel de Administraci√≥n:

    - Accede a http://127.0.0.1:8000/admin/ con tu superusuario
    - NOTA: El panel de admin es principalmente para gesti√≥n de Django
    - La gesti√≥n de productos se hace atrav√©s de la interfaz web y API

10) Resoluci√≥n de Problemas:

    ===== PROBLEMAS COMUNES =====
    
    a) Error de conexi√≥n a MongoDB:
        - Verifica tu conexi√≥n a internet
        - MongoDB Atlas est√° preconfigurado en el proyecto
        
    b) Templates no se cargan:
        - Ejecuta: python manage.py collectstatic --noinput
        
    c) Error al poblar datos:
        - Ejecuta: python manage.py poblar_mongo
        
    d) Problemas con el carrito:
        - Verifica que las cookies est√©n habilitadas
        - El carrito se persiste por sesi√≥n
        - Reinicia el servidor si hay problemas de sesi√≥n
    
    ===== ARCHIVOS IMPORTANTES =====
    - API_ENDPOINTS.md: Documentaci√≥n completa de la API
    - TEMPLATES_ACTIVOS_FINALES.md: Lista de templates utilizados
    - requirements.txt: Dependencias del proyecto
    - credenciales.txt: Credenciales de acceso
    - mongo_config.py: Configuraci√≥n de MongoDB
    - webpay_integration.py: Integraci√≥n con sistema de pagos

11) Informaci√≥n del Proyecto:

    ===== DETALLES T√âCNICOS =====
    - Versi√≥n de Django: 5.2.1
    - Base de datos: MongoDB Atlas (Ferremas)
    - Sistema de pagos: Webpay Plus
    - Autenticaci√≥n: Por sucursal con passwords
    - Sesiones: Persistencia de carrito por cookie
    - Templates: 10 templates activos unificados
    - Arquitectura: API REST + Frontend web

    ===== ESTRUCTURA DE ARCHIVOS CLAVE =====
    proyectapis/
    ‚îú‚îÄ‚îÄ ferremas/
    ‚îÇ   ‚îú‚îÄ‚îÄ templates/ (10 templates activos)
    ‚îÇ   ‚îú‚îÄ‚îÄ mongo_views.py (vistas principales)
    ‚îÇ   ‚îú‚îÄ‚îÄ mongo_urls.py (URLs de API)
    ‚îÇ   ‚îî‚îÄ‚îÄ web_urls.py (URLs web)
    ‚îú‚îÄ‚îÄ carrito/
    ‚îÇ   ‚îú‚îÄ‚îÄ templates/carrito/ (templates del carrito)
    ‚îÇ   ‚îú‚îÄ‚îÄ views_mongo.py (vistas del carrito)
    ‚îÇ   ‚îî‚îÄ‚îÄ urls_mongo.py (URLs del carrito)
    ‚îî‚îÄ‚îÄ proyectapis/
        ‚îú‚îÄ‚îÄ settings.py (configuraci√≥n MongoDB)
        ‚îî‚îÄ‚îÄ urls.py (configuraci√≥n principal)

12) Credenciales y Accesos:

    ===== MONGODB ATLAS =====
    - Usuario: Admin
    - Contrase√±a: Admin
    - Cluster: IntegracionPl
    - Base de datos: Ferremas
    - Conexi√≥n: mongodb+srv://Admin:Admin@integracionpl.jwyptq0.mongodb.net/

    ===== WEBPAY PLUS =====
    - Ambiente: Testing (sandbox)
    - Integraci√≥n: API REST
    - C√≥digos de comercio: Configurados autom√°ticamente
    
    ===== TARJETAS DE PRUEBA WEBPAY =====
    Para realizar pruebas de pago en el ambiente de testing:
    
    üî∏ VISA (Aprobada):
    - N√∫mero: 4051 8856 0000 0005
    - CVV: 123
    - Fecha vencimiento: Cualquier fecha futura
    - Resultado: Transacci√≥n APROBADA
    
    üî∏ MASTERCARD (Aprobada):
    - N√∫mero: 5186 0595 0000 0000
    - CVV: 123
    - Fecha vencimiento: Cualquier fecha futura
    - Resultado: Transacci√≥n APROBADA
    
    üî∏ VISA (Rechazada):
    - N√∫mero: 4051 8842 3993 7763
    - CVV: 123
    - Fecha vencimiento: Cualquier fecha futura
    - Resultado: Transacci√≥n RECHAZADA
    
    üî∏ MASTERCARD (Rechazada):
    - N√∫mero: 5186 0395 0000 0000
    - CVV: 123
    - Fecha vencimiento: Cualquier fecha futura
    - Resultado: Transacci√≥n RECHAZADA
    
    üî∏ Datos del tarjetahabiente (para todas las tarjetas):
    - RUT: 11.111.111-1
    - Nombre: Cualquier nombre
    - Email: test@test.com
    - Tel√©fono: 123456789
    
    ‚ö†Ô∏è IMPORTANTE: 
    - Solo funcionan en ambiente de testing
    - NO usar en producci√≥n
    - Las transacciones son simuladas
    - Webpay redirige autom√°ticamente despu√©s del pago

    ===== DJANGO ADMIN =====
    - URL: http://127.0.0.1:8000/admin/
    - Requiere superusuario (crear con: python manage.py createsuperuser)


    ===== ESTADO ACTUAL =====
    El proyecto est√° completamente funcional con:
    - ‚úÖ 10 templates activos unificados
    - ‚úÖ API REST completamente documentada
    - ‚úÖ Sistema de carrito funcional
    - ‚úÖ Integraci√≥n con Webpay activa
    - ‚úÖ MongoDB Atlas configurado
    - ‚úÖ Documentaci√≥n completa y actualizada
    - ‚úÖ Navegaci√≥n consistente en todas las p√°ginas
    - ‚úÖ Dise√±o responsive y moderno
